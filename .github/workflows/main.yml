# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: install pipenv
      run: pip3 install pipenv
    - name: Cache pipenv packages
      id: cache-pipenv
      uses: actions/cache@v1
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-build-${{ hashFiles('**/Pipfile.lock') }}

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: |
        echo Hello, world!
        echo github ref: ${{ github.ref }}
        echo pipenv-cache hit: ${{ steps.cache-pipenv.outputs.cache-hit }}
        pipenv --version
    - name: install package
      run: make config
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.3.0
      with:
        mongodb-version: latest
    - name: Run test
      run: |
         make test
    - name: bumpversion
      if: endsWith(github.ref, '/main')
      run: |
        git config --global user.name "github"
        git config --global user.email "noreply@github.com"
        make bumpversion
        git push origin main --tags
        python setup.py sdist
    - name: Publish a Python distribution to PyPI
      if: endsWith(github.ref, '/main')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
